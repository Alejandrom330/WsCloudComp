<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- 
	En este fichero vamos a crear todos los objetos que queramos que sean gestionados por el contexto de spring,
	es decir aplicar la inversion de control o tambien llamada IoC
	
	Un objeto spring (bean) se crea con la etiqueta "bean" y al menos hay que darle 2 atributos:
	el id, que debe ser unico y la clase de la cual hay que creal el objeto
	
	El ciclo de vida de este objeto va a ser gestionado por spring y por defecto el ciclo de vida sera "singleton",
	que es que el objeto existira siempre en la aplicacion, es decir sera unico.
	
	Ahora yo como programador no tengo que preocuparme de estar referenciando siempre este objeto.
	
	Ademas el objeto deja de ser anonimo y su identificador es el ID
	
	-->
	
	<!-- NO PUEDE HABER 2 BEAN CON EL MISMO IDENTIFICADOR -->
	
	<bean id="persona1" class="entidades.Persona"> </bean>
	
	<!--
	 Dentro del contexto podemos crear todos los atributos que queramos y podemos alterar sus propiedades(atributos)
	 en este fichero xml. esto podemos hacerlo siempre y cuando tenga estructura javabean
	 
	 -->
	 
	 <bean id="persona2" class="entidades.Persona">
	 	<property name="nombre" value="Ernion GÃ¼esley"></property>
	 	<property name="edad" value="22"></property>
	 	<property name="peso" value="55.3"></property>
	</bean>
	
	<bean id="direccion1" class="entidades.Direccion">
	 	<property name="tipoVia" value="Calle"></property>
	 	<property name="nombreVia" value="Gran Via"></property>
	 	<property name="ciudad" value="Madrid"></property>
	</bean>
	
	<bean id="persona3" class="entidades.Persona">
	 	<property name="nombre" value="Gandalf el Gris"></property>
	 	<property name="edad" value="42"></property>
	 	<property name="peso" value="80"></property>
	 	<property name="direcion" ref="direccion1"></property>
	</bean>
	
	<!-- Es posible que necesitemos crear objetos de ejecucion,
	no que los objetos vengan credos. Para ello podemos usar ek 
	alcance o scope prototype, este alcance a diferencia de 
	singleton, cada vez que llamamos al identificador de este
	objeto, nos va a crear uno nuevo, a imagen y semejanza
	 -->
	 
	 <bean id="personaPrototipada" class="entidades.Persona" scope="prototype">
	 	<property name="nombre" value="IronMan"></property>
	 	<property name="edad" value="40"></property>
	 	<property name="peso" value="250"></property>
	 </bean>
	 
	 <bean id="listaPersonas" class="java.util.LinkedList"></bean>
	
	<bean id="persona4" class="entidades.Persona">
	 	<property name="nombre" value="Homer"></property>
	 	<property name="edad" value="37"></property>
	 	<property name="peso" value="120"></property>
	 	<property name="direcion">
	 		<bean class="entidades.Direccion">
	 			<property name="tipoVia" value="street"></property>
			 	<property name="nombreVia" value="ever green terrance 742"></property>
			 	<property name="ciudad" value="Springfield"></property>
	 		</bean>
	 	</property>
	</bean>
	
	<!-- Podemos crear un arraypredefinido con objetos -->
	
	<bean id="listaPersonas2" class="java.util.LinkedList">
		<constructor-arg>
			<list>
				<ref bean="persona1"/>
				<ref bean="persona2"/>
				<ref bean="persona3"/>
			</list>
		</constructor-arg>
	</bean>
	
	
	
	
	
	
	
	
	
</beans>
